- name: Install OS dependencies
  hosts: all
  tasks:
    - name: Install build essentials
      become: true
      ansible.builtin.package:
        name: build-essential
        state: present

    - name: Install dynamic kernel module support framework
      become: true
      ansible.builtin.package:
        name: dkms
        state: present

- name: Install xpadneo driver
  hosts: all
  vars:
    - audited_commit_hash: "9b3b6968304d75faca00d1cead63f89e8895195f"
    - audited_sources_checksum: "8c6738f428c31c48ec5a3799cb8cc28947d29b93"
    - source_folder: "/usr/src/hid-xpadneo-{{audited_commit_hash}}"
    - source_verification_cmd: >
        export LC_ALL=C &&
        /usr/bin/find {{ source_folder }} -not -type d -print0 2>/dev/null
        | /usr/bin/sort -z
        | /usr/bin/xargs -0 /usr/bin/cat
        | /usr/bin/sha1sum
        | /usr/bin/cut -d' ' -f1

  tasks:
    - name: Check whether source is installed
      ansible.builtin.shell: "{{ source_verification_cmd }}"
      register: verify_sources_result

    - block:
        - name: Download source archive
          ansible.builtin.get_url:
            url: "https://github.com/atar-axis/xpadneo/archive/{{ audited_commit_hash }}.tar.gz"
            dest: /tmp/xpadneo.tar.gz
            mode: u=rwx,g=,o=
            checksum: "sha1:a943ea17d7565a2392fff3c0b5ec2ee6c13e85ea"

        - name: Remove module
          become: yes
          ansible.builtin.command: "/usr/sbin/dkms remove hid-xpadneo/{{ audited_commit_hash }} --all"
          register: remove_module_result
          failed_when:
            - remove_module_result.rc != 0
            - '"is not located in the DKMS tree" not in remove_module_result.stderr'

        - name: Erase source directory
          become: true
          ansible.builtin.file:
            path: "{{ source_folder }}"
            state: absent

        - name: Create empty source directory
          become: true
          ansible.builtin.file:
            path: "{{ source_folder }}"
            state: directory
            mode: u=rwx,g=rx,o=rx

        - name: Install source
          become: true
          ansible.builtin.unarchive:
            remote_src: yes
            src: /tmp/xpadneo.tar.gz
            dest: "{{ source_folder }}"
            include: "xpadneo-{{ audited_commit_hash }}/hid-xpadneo"
            extra_opts:
              - --strip-components=2

        - name: Install dkms configuration file
          become: yes
          ansible.builtin.copy:
            remote_src: true
            src: "{{ source_folder }}/dkms.conf.in"
            dest: "{{ source_folder }}/dkms.conf"
            mode: preserve

        - name: Set version in dkms configuration file
          become: yes
          ansible.builtin.lineinfile:
            path: "{{ source_folder }}/dkms.conf"
            regexp: '^\s*PACKAGE_VERSION='
            line: 'PACKAGE_VERSION="{{ audited_commit_hash }}"'

        - name: Verify source integrity
          ansible.builtin.shell: "{{ source_verification_cmd }}"
          register: verify_sources_again_result
          failed_when: verify_sources_again_result.stdout != audited_sources_checksum

      when: verify_sources_result.stdout != audited_sources_checksum

    - name: Build and install module
      become: yes
      ansible.builtin.command: "/usr/sbin/dkms install hid-xpadneo/{{ audited_commit_hash }}"

- name: Set up Rust toolchain
  hosts: all
  tasks:
    - name: Check whether rustup is available
      ansible.builtin.stat:
        path: "{{ rustup_bin }}"
      register: rustup_lookup_result

    - block:
        - name: Download Rust installer
          ansible.builtin.get_url:
            url: https://sh.rustup.rs
            dest: /tmp/rust_installer.sh
            mode: u=rwx,g=,o=
            force: true

        - name: Run Rust installer
          ansible.builtin.command: /tmp/rust_installer.sh -y

        - name: Validate that rustup is available
          ansible.builtin.stat:
            path: "{{ rustup_bin }}"
          register: rustup_lookup_again_result
          failed_when: not rustup_lookup_again_result.stat.exists

      when: not rustup_lookup_result.stat.exists

    - name: Update Rust toolchain
      ansible.builtin.command: "{{ rustup_bin }} update"

    - name: Validate that cargo is available
      ansible.builtin.stat:
        path: "{{ cargo_bin }}"
      register: cargo_lookup_result
      failed_when: not cargo_lookup_result.stat.exists

- name: Configure udev
  hosts: all
  tasks:
    - name: Install joystick rules
      become: true
      ansible.builtin.copy:
        src: files/99-joystick-links.rules
        dest: /etc/udev/rules.d/99-joystick-links.rules
        owner: root
        group: root
        mode: u=rw,g=r,o=r

- name: Install roestbak service
  hosts: all
  vars:
    - project_root_local: "{{ playbook_dir }}/../"
    - project_root_remote: "{{ ansible_env.HOME }}/src/roestbak"
  tasks:
    - name: Create sources directory
      ansible.builtin.file:
        path: "{{ project_root_remote }}"
        state: directory
        mode: u=rwx,g=rx,o=rx

    - name: Synchronize sources
      ansible.posix.synchronize:
        src: '"{{ project_root_local }}/{{ item }}"'
        dest: "{{ project_root_remote }}/"
        archive: true
        perms: false
        owner: false
        group: false
        delete: true
      loop:
        - Cargo.toml
        - Cargo.lock
        - src

    - name: Build service
      ansible.builtin.command: "{{ cargo_bin }} build --release"
      args:
        chdir: "{{ project_root_remote }}"

    - name: Create bin directory
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/bin"
        state: directory
        mode: u=rwx,g=rx,o=rx

    - name: Copy service to bin directory
      ansible.builtin.copy:
        src: "{{ project_root_remote }}/target/release/roestbak"
        dest: "{{ ansible_env.HOME }}/bin"
        remote_src: true
        mode: preserve
      notify: 
        - Restart service

    - name: Install service unit file
      become: true
      ansible.builtin.template:
        src: files/roestbak.service.j2
        dest: /etc/systemd/system/roestbak.service
        owner: root
        group: root
        mode: u=rw,g=r,o=r
      notify: 
        - Restart service

    - name: Disable service
      become: true
      ansible.builtin.systemd:
        name: roestbak.service
        enabled: false

    - name: Enable service
      become: true
      ansible.builtin.systemd:
        name: roestbak.service
        enabled: true

  post_tasks:
    - name: Ensure service is started
      become: true
      ansible.builtin.systemd:
        name: roestbak.service
        state: started

  handlers:
    - name: Restart service
      become: true
      ansible.builtin.systemd:
        name: roestbak.service
        state: restarted
